////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Frida Framework by Shikifuyin
// Version : 1.0
// Requirements : V8 engine, latest version (8.4+), ECMAScript ES2020+ compliance
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File : ./FridaLib/Process/Thread.ts
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Description : Thread Management
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Imports
import { CPUContext, _ConvertFrom_CPUContext, _ConvertTo_CPUContext } from "../Native/CPUContext";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Exports
export {
    State,
    Descriptor,

    GetCurrentThreadID,
    Sleep,

    EnumThreads,

    BackTrace
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Thread Interfaces : Descriptor
enum State {
	Running = 		  'running',
	Stopped = 		  'stopped',
	Waiting = 		  'waiting',
	Halted =   		  'halted',
	Uninterruptible = 'uninterruptible'
};

interface Descriptor {
    ID:number;
    State:State;
    Context:CPUContext;
}

function _ConvertTo_Descriptor( hDetails:ThreadDetails ):Descriptor {
    let hConverted:Partial<Descriptor> = {};
    hConverted.ID = hDetails.id;
    hConverted.State = State[hDetails.state as keyof typeof State];
    hConverted.Context = _ConvertTo_CPUContext( hDetails.context );

    return ( hConverted as Descriptor );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Thread Properties
function GetCurrentThreadID():number {
    return Process.getCurrentThreadId();
}

function Sleep( fSeconds:number ):void {
    Thread.sleep( fSeconds );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Thread Enumeration
function EnumThreads():Descriptor[] {
    let arrDescs:ThreadDetails[] = Process.enumerateThreads();

    let arrResults:Descriptor[] = [];
    arrDescs.forEach( function( hDesc:ThreadDetails ):void {
        arrResults.push( _ConvertTo_Descriptor(hDesc) );
    });
    return arrResults;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Thread BackTracing
function BackTrace( hContext:CPUContext, bFuzzyMode:boolean = false ):string {
    var iMode = bFuzzyMode ? Backtracer.FUZZY : Backtracer.ACCURATE;
    return Thread.backtrace( _ConvertFrom_CPUContext(hContext), iMode ).map( DebugSymbol.fromAddress ).join( '\n' );
}
