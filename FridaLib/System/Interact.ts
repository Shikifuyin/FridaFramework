////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Frida Framework by Shikifuyin
// Version : 1.0
// Requirements : V8 engine, latest version (8.4+), ECMAScript ES2020+ compliance
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File : ./FridaLib/System/Interact.ts
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Description : Interaction between Injected JS and Frida Application
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Imports

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Exports
export {
    ReceiveCallback,
    ReceiveOperation,

    RPCFunction,

    SendMessage,
    ReceiveMessage,

    ExportFunction
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Messages Interfaces
interface ReceiveCallback {
    ( hMessage:any, hRawData:ArrayBuffer | null ): void;
}
interface ReceiveOperation {
    Wait():void;
}

function _ConvertTo_ReceiveOperation( hMessageRecvOperation:MessageRecvOperation ):ReceiveOperation {
    return {
        Wait: hMessageRecvOperation.wait
    };
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RPC Interfaces
interface RPCFunction {
    ( ...arrParams:any[] ):any;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Messages
function SendMessage( hMessage:any, hRawData:ArrayBuffer | number[] | undefined = undefined ):void {
    send( hMessage, hRawData );
}

function ReceiveMessage( hCallback:ReceiveCallback, strType:string ):ReceiveOperation {
    return _ConvertTo_ReceiveOperation( recv(strType, hCallback) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RPC Exports
function ExportFunction( strName:string, hFunction:RPCFunction ) {
    rpc.exports[strName] = hFunction;
}

